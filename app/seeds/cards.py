from app.models import db, Card


def seed_cards():

    SQL_easy1 = Card(question="MySQL supports user defined functions", answer="True", deckId=1)
    SQL_easy2 = Card(question="You can add a row using SQL in a database with which of the following?", answer="ADD", deckId=1)
    SQL_easy3 = Card(question="Is the None value treated as 0?", answer="True", deckId=1)
    SQL_easy4 = Card(question="Which command is used to modify column names or table structure?", answer="MODIFY", deckId=1)
    SQL_easy5 = Card(question="The command DROP SCHEMA `STUDENTS`; will delete the students database.", answer="True", deckId=1)
    SQL_easy6 = Card(question="MySQL workbench decreases the productivity of a MySQL developer compared to other server access tools such as phpMyAdmin?", answer="True", deckId=1)
    SQL_easy7 = Card(question="To use MySQL on your computer, you'll need", answer="Perl, PHP Or Java", deckId=1)
    SQL_easy8 = Card(question="What Is a MySQL View?", answer="VIEWS are virtual tables that do not store any data of their own but display data stored in other tables.", deckId=1)
    SQL_easy9 = Card(question="Which among the following have the maximum available bytes?", answer="Varchar", deckId=1)
    SQL_easy10 = Card(question="What will be the output of the following query INSERT INTO students (student name) VALUE ('James Lenon');", answer="a student record with the name James Lenon will be added into the students table", deckId=1)
    SQL_easy11 = Card(question="What will be the output of the query SELECT * FROM `members` LIMIT 1, 2;", answer="the query will generate an error", deckId=1)
    SQL_easy12 = Card(question="Once a table has been created in MySQL, its structure cannot be altered", answer="True", deckId=1)
    SQL_easy13 = Card(question="The ASC and DESC keywords can be used in the same statement", answer="True", deckId=1)
    SQL_easy14 = Card(question="MySQL supports different Character Sets, which command is used to display all of them?", answer="SHOW;  ;", deckId=1)
    SQL_easy15 = Card(question="Commands passed to the MySQL daemon are written in", answer="English", deckId=1)
    SQL_easy16 = Card(question="What is the use of SQL?", answer="Storing data in database", deckId=1)
    SQL_easy17 = Card(question="How can you change table sctructure after it was created?", answer="CHANGE TABLE", deckId=1)
    SQL_easy18 = Card(question="MySQL does not support auto generating numbers", answer="True", deckId=1)
    SQL_easy19 = Card(question="The command to remove rows from a table \"MOVIE\" is:", answer="REMOVE FROM MOVIE", deckId=1)
    SQL_easy20 = Card(question="The maximum length of the char columns is", answer="65, 535 Bytes", deckId=1)
    SQL_medium1 = Card(question="Which command is used to specify the number of records to return?", answer="SELECT", deckId=2)
    SQL_medium2 = Card(question="Character data can be stored as", answer="Both fixed or variable length strings", deckId=2)
    SQL_medium3 = Card(question="Which of the following is available in MySQL:", answer="CREATE VIEW", deckId=2)
    SQL_medium4 = Card(question="Which query will return values containing strings \"apple\", \"banana\" or \"orange\" in the database?", answer="SELECT * FROM table WHERE field REGEXP ‘apple|banana|orange’;", deckId=2)
    SQL_medium5 = Card(question="Which \"text Type\" has the maximum number of bytes?", answer="Long Text", deckId=2)
    SQL_medium6 = Card(question="Which declaration doesn't use the same number of bytes and consumption of bytes depending on the input data?", answer="Varchar", deckId=2)
    SQL_medium7 = Card(question="The problem that occurs when one transaction updates a database item and then the transaction fails for some reason is ________.", answer="Dirty Read Problem", deckId=2)
    SQL_medium8 = Card(question="DML is included into SQL language of:", answer="managing users", deckId=2)
    SQL_medium9 = Card(question="The query SELECT * FROM `movies` INSERT INTO `movies_archive`  will be executed without any errors.", answer="True", deckId=2)
    SQL_medium10 = Card(question="Which one is the correct declaration for choosing the 'Character Set' other than default?", answer="Varchar(20);", deckId=2)
    SQL_medium11 = Card(question="A one to many relationship can only contain multiple entries of both primary and foreign keys.", answer="True", deckId=2)
    SQL_medium12 = Card(question="To use 'mysqldbcopy' which privileges are required on the source server?", answer="CREATE", deckId=2)
    SQL_medium13 = Card(question="Which function returns reference to Array of row values?", answer="Fetch()", deckId=2)
    SQL_medium14 = Card(question="The syntax for adding a new column to an existing table is ALTER TABLE `table_name` ADD COLUMN `column_name` `data_type`;", answer="True", deckId=2)
    SQL_medium15 = Card(question="INSERT keyword is used for:", answer="adding data", deckId=2)
    SQL_medium16 = Card(question="What improvements can be made to the query UPDATE students SET `contact number` = 0999;", answer="The query does not need any improvements", deckId=2)
    SQL_medium17 = Card(question="What will be the output of the following query. SELECT * FROM `sales` WHERE amount > 200.", answer="the query will display all the sales records with amounts starting from 200 and above", deckId=2)
    SQL_medium18 = Card(question="The maximum length of the varchar columns Is", answer="Upto 65, 535 Bytes", deckId=2)
    SQL_medium19 = Card(question="Which of the following statements is NOT true for views in SQL?", answer="Select statement used in the view definition cannot include ORDER BY clause.", deckId=2)
    SQL_hard1 = Card(question="Which of the following is not a valid logical operator?", answer="&", deckId=3)
    SQL_hard2 = Card(question="Which of the following is not a valid comparison operator?", answer="==", deckId=3)
    SQL_hard3 = Card(question="Which of the following statements are true about SQL injection attacks?",answer="Wrapping all variables containing user input by a call to mysql_real_escape_string() makes the code immune to SQL injections.", deckId=3)
    SQL_hard4 = Card(question="The employees table has 20 records, what will be the output of the query SELECT gender FROM employees GROUP BY gender;",answer="the query will return two rows only", deckId=3)
    SQL_hard5 = Card(question="What will be the effect of the query SELECT c.*,e.* FROM clients c INNER JOIN employees e ON c.emp_no = e.emp_no;",answer="return all the records from the clients table and only those that match the emp_no from the employees table", deckId=3)
    SQL_hard6 = Card(question="What will happen if two tables have names 'users' and 'USERS'?",answer="This is not possible because table names are case insensitive", deckId=3)
    SQL_hard7 = Card(question="Which of the following SQL statements is correct?",answer="SELECT cname, COUNT(cname) FROM Orders", deckId=3)
    SQL_hard8 = Card(question="Which of the following statements are true?",answer="Names of databases, tables and columns can be up to 64 characters in length", deckId=3)
    SQL_hard9 = Card(question="What is the best advantage of InnoDB over MyISAM?",answer="InnoDB is thread safe", deckId=3)
    SQL_hard10 = Card(question="_____ is process of extracting previously non known valid and actionable information from large data to make crucial business and strategic decisions.",answer="Data Management", deckId=3)
    SQL_hard11 = Card(question="What is the maximum size of a row in a MyISAM table?",answer="No limit", deckId=3)
    SQL_hard12 = Card(question="One of the early proponents of a Relational Database who laid down many of the principles we use to this day was:",answer="Xigang Koi", deckId=3)
    SQL_hard13 = Card(question="How many distinct, different values can you hold in an Enum field?", answer="255", deckId=3)
    SQL_hard14 = Card(question="A table that displays data redundancies yields ________ anomalies",answer="Insertion", deckId=3)
    SQL_hard15 = Card(question="What is the Commit command is used for?",answer="To restore the old values", deckId=3)
    SQL_hard16 = Card(question="How to dump the whole MySQL database to a file?",answer="mysql -e \"select * from table\" -u user -pxxxxxxx database > dumpfile.txt", deckId=3)
    SQL_hard17 = Card(question="The Function 'fetchrow_hashref()' returns reference to hash row values keyed by ______________",answer="Row Name", deckId=3)
    SQL_hard18 = Card(question="Which command is used to remove all rows from a table?", answer="Delete", deckId=3)
    SQL_hard19 = Card(question="Function which causes retrieval of any kind of data from database is considered as",answer="Interface or Signature", deckId=3)


    # db.session.add
    db.session.add(SQL_easy1)
    db.session.add(SQL_easy2)
    db.session.add(SQL_easy3)
    db.session.add(SQL_easy4)
    db.session.add(SQL_easy5)
    db.session.add(SQL_easy6)
    db.session.add(SQL_easy7)
    db.session.add(SQL_easy8)
    db.session.add(SQL_easy9)
    db.session.add(SQL_easy10)
    db.session.add(SQL_easy11)
    db.session.add(SQL_easy12)
    db.session.add(SQL_easy13)
    db.session.add(SQL_easy14)
    db.session.add(SQL_easy15)
    db.session.add(SQL_easy16)
    db.session.add(SQL_easy17)
    db.session.add(SQL_easy18)
    db.session.add(SQL_easy19)
    db.session.add(SQL_easy20)
    db.session.add(SQL_medium1)
    db.session.add(SQL_medium2)
    db.session.add(SQL_medium3)
    db.session.add(SQL_medium4)
    db.session.add(SQL_medium5)
    db.session.add(SQL_medium6)
    db.session.add(SQL_medium7)
    db.session.add(SQL_medium8)
    db.session.add(SQL_medium9)
    db.session.add(SQL_medium10)
    db.session.add(SQL_medium11)
    db.session.add(SQL_medium12)
    db.session.add(SQL_medium13)
    db.session.add(SQL_medium14)
    db.session.add(SQL_medium15)
    db.session.add(SQL_medium16)
    db.session.add(SQL_medium17)
    db.session.add(SQL_medium18)
    db.session.add(SQL_medium19)
    db.session.add(SQL_hard1)
    db.session.add(SQL_hard2)
    db.session.add(SQL_hard3)
    db.session.add(SQL_hard4)
    db.session.add(SQL_hard5)
    db.session.add(SQL_hard6)
    db.session.add(SQL_hard7)
    db.session.add(SQL_hard8)
    db.session.add(SQL_hard9)
    db.session.add(SQL_hard10)
    db.session.add(SQL_hard11)
    db.session.add(SQL_hard12)
    db.session.add(SQL_hard13)
    db.session.add(SQL_hard14)
    db.session.add(SQL_hard15)
    db.session.add(SQL_hard16)
    db.session.add(SQL_hard17)
    db.session.add(SQL_hard18)
    db.session.add(SQL_hard19)
    db.session.commit()


def undo_cards():
    db.session.execute('TRUNCATE cards RESTART IDENTITY CASCADE;')
    db.session.commit()
